<apex:page language="en" controller="RichTextFieldEditor" contentType="text/html; charset=utf-8" showHeader="True" standardStylesheets="True" docType="html-5.0" cache="False" applyHtmlTag="True" applyBodyTag="False">



	<head>
		<meta charset="utf-8" />
		<title>OCDLA | Example Froala Editor</title>
	    <link href='https://cdn.jsdelivr.net/npm/froala-editor@latest/css/froala_editor.pkgd.min.css' rel='stylesheet' type='text/css' />
		<script type='text/javascript' src='https://cdn.jsdelivr.net/npm/froala-editor@latest/js/froala_editor.pkgd.min.js'>
        </script>  
	</head>

	<body>



		<script>
			//<![CDATA[
            
			function saveEditorData(e) {
				e.preventDefault();
				e.stopPropagation();
				// Get the editor data.
				// let html = editor.getData(); 
				let html = editor.html.get(true);
				console.log("Saving editor data.");
				saveData(html);
			}
			//]]>
		</script>


		<div class="main-container">
			<div class="editor-container editor-container_classic-editor editor-container_include-style" id="editor-container">
				<div class="editor-container__editor">
					<div id="editor">
						<apex:outputText value="{!fieldValue}" escape="False" />
					</div>
				</div>
			</div>
		</div>

		<apex:outputPanel id="out">
			<apex:actionStatus startText="Ready..." id="myStatus">
				<apex:facet name="stop">Saved!</apex:facet>
			</apex:actionStatus>
		</apex:outputPanel>

		<apex:form id="field-editor">

			<apex:actionFunction action="{!doSubmit}" name="saveData" rerender="out" status="myStatus">
				<apex:param name="p1" assignTo="{!fieldValue}" value="" />
			</apex:actionFunction>

			<button id="editor-save">Save</button>
			<apex:commandButton action="{!doCancel}" value="Back to Record" />
		</apex:form>


		<script type="text/javascript">
			//<![CDATA[

			let editor;
        	let config = {
                  fontFamilySelection: true,
                fontSizeSelection: true,
                paragraphFormatSelection: true,
 toolbarButtons: [
     ['clearFormatting','bold', 'italic', 'underline','fontFamily', 'fontSize', 'textColor', 'strikeThrough', 'subscript', 'superscript','-',
      'alignLeft', 'alignCenter', 'formatOLSimple', 'alignRight', 'alignJustify', 'formatOL', 'formatUL', 'paragraphFormat', 'paragraphStyle', 'lineHeight', 'outdent', 'indent', 'quote','-',
	'insertLink', 'insertImage', 'insertVideo', 'insertTable', 'emoticons', 'fontAwesome', 'specialCharacters', 'embedly', 'insertFile', 'insertHR','-',
	'undo', 'redo', 'fullscreen', 'print', 'getPDF', 'spellChecker', 'selectAll', 'html', 'help','-',
      'backgroundColor', 'inlineClass', 'inlineStyle']
 ]        
                };
			window.addEventListener("load", function () {
                editor = new FroalaEditor('#editor', config);
				document.getElementById("editor-save").addEventListener("click", saveEditorData);
			});

			/**
			 * This function exists to remind you to update the config needed for premium features.
			 * The function can be safely removed. Make sure to also remove call to this function when doing so.
			 */
			function configUpdateAlert(config) {
				if (configUpdateAlert.configUpdateAlertShown) {
					return;
				}

				const isModifiedByUser = (currentValue, forbiddenValue) => {
					if (currentValue === forbiddenValue) {
						return false;
					}

					if (currentValue === undefined) {
						return false;
					}

					return true;
				};

				const valuesToUpdate = [];

				configUpdateAlert.configUpdateAlertShown = true;

				if (!isModifiedByUser(config.licenseKey, '<YOUR_LICENSE_KEY>')) {
					valuesToUpdate.push('LICENSE_KEY');
				}

				if (!isModifiedByUser(config.cloudServices?.tokenUrl, '<YOUR_CLOUD_SERVICES_TOKEN_URL>')) {
					valuesToUpdate.push('CLOUD_SERVICES_TOKEN_URL');
				}

				if (valuesToUpdate.length) {
					window.alert(
						[
							'Please update the following values in your editor config',
							'to receive full access to Premium Features:',
							'',
							...valuesToUpdate.map(value => ` - ${value}`)
						].join('\n')
					);
				}
			}

			//]]>
		</script>
	</body>



</apex:page>